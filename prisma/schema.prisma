// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  phone         String?
  skills        String[]
  interests     String[]
  location      String?

  services      Service[]      @relation("UserServices")
  buyerOrders   Order[]        @relation("BuyerOrders")
  sellerOrders  Order[]        @relation("SellerOrders")
  reviews       Review[]       @relation("UserReviews")
  notifications Notification[] @relation("UserNotifications") // Fixed relation reference
}

//  messages Messages[] @relation("UserMessages")

model VerificationToken {
  identifier String   @id @map("_id")
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Service {
  id       String  @id @default(cuid()) @map("_id")
  name     String
  rate     Float
  sellerId String
  seller   User    @relation("UserServices", fields: [sellerId], references: [id])
  orders   Order[] @relation("ServiceOrders")
}

model Review {
  id         String   @id @default(cuid()) @map("_id")
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  reviewerId String
  reviewer   User     @relation("UserReviews", fields: [reviewerId], references: [id])
  rating     Int
  comment    String
  createdAt  DateTime @default(now())

  @@index([orderId])
  @@index([reviewerId])
}

model Order {
  id          String   @id @default(cuid()) @map("_id")
  serviceId   String
  workTitle   String?
  description String?
  rate        String?
  category    String?
  createdAt   DateTime @default(now())
  buyerId     String?
  sellerId    String?
  status      String

  service         Service?         @relation("ServiceOrders", fields: [serviceId], references: [id])
  buyer           User?            @relation("BuyerOrders", fields: [buyerId], references: [id])
  seller          User?            @relation("SellerOrders", fields: [sellerId], references: [id])
  Review          Review[]
  purchasedOrders PurchasedOrder[] @relation("OrderPurchasedOrders")
  notifications   Notification[]   @relation("OrderNotifications")
}

model PurchasedOrder {
  id           String   @id @default(cuid()) @map("_id")
  orderId      String
  purchaseDate DateTime @default(now())
  status       String   @default("pending")

  order   Order     @relation("OrderPurchasedOrders", fields: [orderId], references: [id])
  payment Payment[] @relation("OrderPayment")
}

model Payment {
  id                      String         @id @default(cuid()) @map("_id") // Unique ID
  transactionId           String         @unique
  productId               String
  amount                  Float // Numeric field for the payment amount
  dataFromVerificationReq Json? // Optional JSON field for verification data
  apiQueryFromUser        Json? // Optional JSON field for user query data
  paymentGateway          PaymentGateway // Enum for payment gateways
  status                  PaymentStatus  @default(PENDING) // Enum for payment status with a default value
  paymentDate             DateTime       @default(now())
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt

  purchasedOrder PurchasedOrder @relation("OrderPayment", fields: [productId], references: [id])
}

enum PaymentGateway {
  KHALTI
  ESEWA
  CONNECTIPS
}

enum PaymentStatus {
  SUCCESS
  PENDING
  FAILED
}

model Messages {
  id          String   @id @default(cuid()) @map("_id")
  senderId    String
  recipientId String
  text        String
  file        String?
  timestamp   DateTime
}

model Notification {
  id        String   @id @default(cuid()) @map("_id")
  type      String
  message   String
  userId    String
  read      Boolean  @default(false) @map("isRead")
  createdAt DateTime @default(now()) @map("date")
  updatedAt DateTime @default(now()) @map("updatedAt")
  orderId   String?

  order Order? @relation("OrderNotifications", fields: [orderId], references: [id])
  user  User   @relation("UserNotifications", fields: [userId], references: [id])

  @@map("Notification")
}
