// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid()) @map("_id")
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buyerId  Int?
  sellerId Int?
  Buyer    Buyer?
  Seller   Seller?
}

model Buyer {
  id     String  @id @default(cuid()) @map("_id")
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique
  orders Order[]
}

model Seller {
  id       String    @id @default(cuid()) @map("_id")
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @unique
  services Service[]
  orders   Order[]   @relation("SellerOrders")
}

model Service {
  id          String   @id @default(cuid()) @map("_id")
  title       String
  description String
  price       Float
  seller      Seller   @relation(fields: [sellerId], references: [id])
  sellerId    String
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id        String      @id @default(cuid()) @map("_id")
  service   Service     @relation(fields: [serviceId], references: [id])
  serviceId String
  buyer     Buyer       @relation(fields: [buyerId], references: [id])
  buyerId   String
  seller    Seller      @relation(fields: [sellerId], references: [id], name: "SellerOrders")
  sellerId  String
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum Role {
  USER
  BUYER
  SELLER
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
